(()=>{"use strict";var t={78:(t,e,o)=>{t.exports=o.p+"5ca61e82c0584bdf361e.svg"},613:(t,e,o)=>{t.exports=o.p+"b102e0c138da3d1896f3.svg"},417:(t,e,o)=>{t.exports=o.p+"197ea0849751401ac26c.svg"},265:(t,e,o)=>{t.exports=o.p+"39615cbdd64fcf136338.svg"},358:(t,e,o)=>{t.exports=o.p+"3ae544c41122d8b588cf.svg"},239:(t,e,o)=>{t.exports=o.p+"7c1c84ecb7617dea83aa.svg"},625:(t,e,o)=>{t.exports=o.p+"931b67957a51309f028b.svg"}},e={};function o(n){var r=e[n];if(void 0!==r)return r.exports;var a=e[n]={exports:{}};return t[n](a,a.exports,o),a.exports}o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var t;o.g.importScripts&&(t=o.g.location+"");var e=o.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=t})(),(()=>{const t=document.getElementById("popUp");function e(e,o,n){if(t.classList.remove("dp-none"),t.querySelector("label").textContent=e,o?t.querySelector("input").classList.remove("dp-none"):t.querySelector("input").classList.add("dp-none"),n){if(t.querySelector("[data-err]")){const e=t.querySelector("[data-err]");t.querySelector("[data-form]").removeChild(e)}const e=document.createElement("p");e.textContent=n,e.dataset.err=!0,t.querySelector("[data-form]").insertBefore(e,t.querySelector("[data-buttons]"))}return 0}const n={use:"function",input:"string",set fn(t){this.use=t},set inputVal(t){this.input=t}};t.addEventListener("click",(e=>{if(t.querySelector("[data-err]")){const e=t.querySelector("[data-err]");t.querySelector("[data-form]").removeChild(e)}(e.target.matches("#popUp")||e.target.matches(".warning"))&&(e.preventDefault(),t.classList.add("dp-none"),t.querySelector("input").value=""),e.target.matches(".success")&&(e.preventDefault(),t.querySelector("input").classList.contains("dp-none")?(n.use(),t.classList.add("dp-none")):(n.inputVal=t.querySelector("input").value??!1,t.querySelector("input").value="",n.use(n.input),t.classList.add("dp-none")))}));var r=o(239),a=o(417),s=o(265),c=o(78),i=o(358);const l=document.getElementById("taskEditor"),d=document.getElementById("addTask-btn"),p=document.getElementById("updateTask-btn"),u=document.getElementById("filterContainer"),g=document.getElementById("listContainer"),m=document.getElementById("projectList-btn"),y=document.getElementById("deleteTask-btn"),h=(()=>{function t(){const t=l.querySelectorAll(".dropdown[data-color]"),e=l.querySelector("#priorityMenu > button").textContent;t.forEach((t=>{t.setAttribute("data-color",e)}))}return d.querySelector("img").src=s,m.querySelector("img").src=a,p.querySelector("img").src=c,y.querySelector("img").src=i,l.querySelector("#cancelEdit-btn > img").src=r,l.addEventListener("click",(e=>{l.querySelectorAll(".dropdown").forEach((t=>{t.classList.remove("active")})),e.target.matches("[data-dropdown-priority]")?e.target.closest("#priorityMenu").classList.toggle("active"):(e.target.matches("[data-priority-link]")&&(e.target.closest("#priorityMenu").querySelector("[data-dropdown-priority]").textContent=e.target.textContent,t()),e.target.matches("[data-dropdown-project]")?e.target.closest("#projectMenu").classList.toggle("active"):e.target.matches("[data-project-link]")&&(e.target.closest("#projectMenu").querySelector("[data-dropdown-project]").textContent=e.target.textContent))})),l.querySelector("#cancelEdit-btn").addEventListener("click",(()=>{m.classList.toggle("dp-none"),u.classList.toggle("dp-none"),g.classList.toggle("dp-none"),l.classList.toggle("dp-none"),d.classList.toggle("dp-none"),p.classList.toggle("dp-none"),y.classList.add("dp-none")})),l.querySelector("#markCompleted-btn").addEventListener("click",(t=>{t.target.classList.toggle("mark"),t.target.textContent=t.target.classList.contains("mark")?"Completed":"Mark Completed"})),{setTaskEditorPage:function(t){return d.classList.toggle("dp-none"),u.classList.toggle("dp-none"),g.classList.toggle("dp-none"),m.classList.toggle("dp-none"),"add"===t?y.classList.add("dp-none"):y.classList.toggle("dp-none"),p.classList.toggle("dp-none"),l.classList.toggle("dp-none"),0},getFormElement:function(){return{priorityEl:l.querySelector("[data-dropdown-priority]"),dueDateEl:l.querySelector("#dueDateInput"),projectEl:l.querySelector("[data-dropdown-project]"),titleEl:l.querySelector("#todoInput"),descriptionEl:l.querySelector("#descriptionInput"),completedEl:l.querySelector("#markCompleted-btn")}},colorBtns:t}})(),f=(()=>{const t={tasks:{init:{priority:"High",dueDate:(new Date).toLocaleDateString("en-US",{year:"numeric",month:"short",day:"numeric"}),project:"myProject",title:"Hello World 😁",description:"Click me to edit my content. Or, click the button on the bottom right corner",completed:!1},init2:{priority:"Medium",dueDate:(new Date).toLocaleDateString("en-US",{year:"numeric",month:"short",day:"numeric"}),project:"myProject",title:"Showing the appearance of completed tasks",description:"Using filters just below the page title for displaying only uncomplete tasks or searching for the tasks under some project",completed:!0},init3:{priority:"Low",dueDate:(new Date).toLocaleDateString("en-US",{year:"numeric",month:"short",day:"numeric"}),project:"myProject",title:"Creating projects!",description:"Try the button on the bottom left ↙",completed:!1}},projects:{myProject:0},preference:{projectFilter:"",displayFilter:"All"}};return{getTodolist:async function e(){try{const o=await JSON.parse(localStorage.getItem("todolist"));return await o||(localStorage.setItem("todolist",JSON.stringify(t)),e()),o}catch(t){throw new Error("todolist isn't exit")}}}})(),S=f,v=t=>{const e=new Date(t),[o,n,r]=[e.getMonth(),e.getDate(),e.getFullYear()];return`${r}-${o+1<10?"0".concat(o+1):o}-${n<10?"0".concat(n):n}`},E=(()=>{async function t(){try{const t=await async function(){const t=await S.getTodolist(),e=await t.preference.displayFilter;return u.querySelector("#displayFilter > button").textContent=e,e}();g.querySelectorAll(".task-container").forEach((e=>{e.classList.remove("dp-none"),("true"===e.getAttribute("data-status")?"Completed":"Uncompleted")!==t&&"All"!==t&&e.classList.add("dp-none")}))}catch(t){throw new Error(t)}}return u.querySelector("#projectFilterInput").addEventListener("input",(t=>function(t){const e=t.target.value.toUpperCase(),o=e.split("");g.querySelectorAll(".task-container").forEach((t=>{t.classList.remove("dp-none");const n=t.querySelector(".tag-container > .project").textContent.toUpperCase().split("");if(!e)return 1;for(let e=0;e<o.length;e+=1)if(n[e]!==o[e])return t.classList.add("dp-none"),1;return 0}))}(t))),u.addEventListener("click",(e=>{e.target.matches("[data-dropdown-display]")?e.target.closest("#displayFilter").classList.toggle("active"):(e.target.matches("[data-display-link]")&&(e.target.closest("#displayFilter").querySelector("[data-dropdown-display]").textContent=e.target.textContent,Promise.resolve(async function(){const t=await S.getTodolist(),e=await t;e.preference.displayFilter=u.querySelector("#displayFilter > button").textContent,localStorage.clear(),localStorage.setItem("todolist",JSON.stringify(e))}()).then((()=>{t()}))),u.querySelector(".dropdown").classList.remove("active"))})),{filterTasks:t,sortTasks:async function(){const t=g.querySelectorAll(".task-container"),e=[];Array.from(t).forEach((t=>{const o=t.getAttribute("data-name"),n=t.querySelector(".due-date").textContent,r=new Date(n).getTime(),a=t.querySelector(".priority").textContent,s=t.querySelector(".project").textContent,c="none"!==s?s.toUpperCase().split("").map((t=>-1*t.charCodeAt())):[-91],i=t.getAttribute("data-status"),l=[o,r,{none:0,Low:1,Medium:2,High:3}[a],c,"true"===i?-1:1];e.push(l)})),(await async function(t){const e=t;for(let t=0;t<e.length-1;t+=1)for(let o=0;o<e.length-1-t;o+=1){const t=Number.parseInt(e[o][1],16),n=Number.parseInt(e[o+1][1],16),r=t>n,a=t===n,s=e[o][2]<e[o+1][2],c=e[o][2]===e[o+1][2];let i=!1;const l=e[o][3],d=e[o+1][3],p=l.length<d.length?l.length:d.length,u=l.join()===d.join();for(let t=0;t<p;t+=1)l[t]<d[t]&&(i=!0);const g=e[o][4]<e[o+1][4],m=e[o][4]===e[o+1][4];let y=!1;if(a?c?u?m||(y=g):y=i:y=s:y=r,y){const t=e[o];e[o]=e[o+1],e[o+1]=t}}return e}(e)).forEach((t=>{const[e]=t,o=g.querySelector(`[data-name="${e}"]`),n=o;return g.removeChild(o),g.appendChild(n),0}))}}})(),L=E,w=(()=>{async function t(){const t=document.querySelector("#projectMenu > .dropdown-menu"),e=await S.getTodolist();for(;t.children[0];)t.removeChild(t.children[0]);Object.keys(e.projects).forEach((e=>{const o=document.createElement("p");o.classList.add("dropdown-link"),o.dataset.projectLink=e,o.textContent=e,t.appendChild(o)}))}async function o(o){const n=await S.getTodolist(),{projects:r}=await n;if(o in await r)return e("Create a project",!0,"the name has been used"),this;if(!1===o||!o.toString().trim())return e("Create a project",!0,"Please enter a name"),this;r[o]=0;const a=n;return a.projects=r,localStorage.clear(),localStorage.setItem("todolist",JSON.stringify(a)),t(),0}async function r(){const e=await S.getTodolist();try{const o=e.tasks;Object.entries(o).forEach((e=>{const[o,n]=e,r=document.createElement("div"),a=n.description.length>71?n.description.slice(0,71).concat("..."):n.description,s="none"===n.priority?"dp-none":"",c="none"===n.project?"dp-none":"";r.classList.add("task-container"),r.innerHTML=`\n          <div class="tag-container" data-color="${n.priority}">\n            <div class="priority ${s}">${n.priority}</div>\n            <div class="due-date">${n.dueDate}</div>\n            <div class="project ${c}">${n.project}</div>\n          </div>\n          <div class="info-container">\n            <div class="title">${n.title}</div>\n            <div class="description">${a}</div>\n          </div>\n        `,r.dataset.name=o,r.dataset.status=n.completed,r.addEventListener("click",(()=>{!function(e,o){h.setTaskEditorPage(),t();const{priorityEl:n,dueDateEl:r,projectEl:a,titleEl:s,descriptionEl:c,completedEl:i}=h.getFormElement(),{priority:l,dueDate:d,project:p,title:u,description:g,completed:m}=o;n.textContent=l,r.value=v(d),a.textContent=p,s.value=u,s.dataset.name=e,c.value=g,!0===m&&(i.textContent="Completed",i.classList.add("mark")),h.colorBtns()}(o,n)})),g.appendChild(r)})),L.filterTasks(),L.sortTasks()}catch(t){throw new Error(t)}}function a(){g.querySelectorAll(".task-container").forEach((t=>{g.removeChild(t)}))}function s(t){m.classList.toggle("dp-none"),u.classList.toggle("dp-none"),g.classList.toggle("dp-none"),l.classList.toggle("dp-none"),d.classList.toggle("dp-none"),p.classList.toggle("dp-none"),y.classList.add("dp-none"),a(),localStorage.removeItem("todolist"),localStorage.setItem("todolist",JSON.stringify(t)),r()}async function c(){const t=await S.getTodolist(),e=await t,o=l.querySelector("#todoInput").dataset.name;if(!(o in e.tasks))throw new Error("id missing, check delete");delete e.tasks[o],s(await e)}return document.querySelector("#projectMenu + button").addEventListener("click",(()=>{e("Create a project",!0),n.fn=o})),d.addEventListener("click",(()=>{h.setTaskEditorPage("add"),t();const{priorityEl:e,dueDateEl:o,projectEl:n,titleEl:r,descriptionEl:a,completedEl:s}=h.getFormElement();l.querySelector("#priorityMenu").setAttribute("data-color","default"),e.textContent="none",o.value=v(Date.now()),l.querySelector("#projectMenu").setAttribute("data-color","default"),n.textContent="none",r.value="",r.dataset.name="addNewTask",a.value="",s.classList.remove("mark")})),p.addEventListener("click",(()=>{new Promise(((t,e)=>{t(S.getTodolist()),e(new Error("something wrong when updating"))})).then((t=>{const e=t,o=l.querySelector("#todoInput").dataset.name,{priorityEl:n,dueDateEl:r,projectEl:a,titleEl:c,descriptionEl:i,completedEl:d}=h.getFormElement(),p={priority:n.textContent,dueDate:new Date(r.value).toLocaleDateString("en-US",{year:"numeric",month:"short",day:"numeric"}),project:a.textContent,title:c.value,description:i.value,completed:d.classList.contains("mark")},u=function(t){let e=0;const o=Object.values(t).toString().split("").map((t=>t.charCodeAt(0)));for(let t=0;t<o.length;t+=1)e+=parseInt(o[t],16)*(t+1);return`id${e.toString()}`}(p);if(o in e.tasks)delete e.tasks[o],e.tasks[u]=p;else{if("addNewTask"!==o)throw new Error("the entry of the task doesn't exit");e.tasks[u]=p}s(e)}))})),y.addEventListener("click",(function(){e("Delete cannot undo",!1),n.fn=c})),{createTasks:r,clearList:a}})();var j=o(625),k=o(613);const C=(()=>{const t=document.getElementById("projectContainer"),o=document.getElementById("listContainer"),r=document.getElementById("projectAdd-btn");function a(){const t=document.getElementById("projectList");return t.children[0]&&(t.removeChild(t.children[0]),a()),0}async function s(){const o=await S.getTodolist(),r=await o.projects;let c=1;Object.entries(r).forEach((r=>{const[i]=r;let[,l]=r;Object.values(o.tasks).forEach((t=>{i===t.project&&(l+=1)}));const d=document.createElement("li");d.classList.add("project-item"),d.innerHTML=`\n            <p data-project>${c}. ${i.toString()}</p>\n            <div class="task-counter">\n              <span>${l}</span>\n              <div>task${l>1?"s":""} in the project</div>\n            </div>\n            <div class="delete-sign">\n              <img src="${j}" alt="delete">\n            </div>\n          `,c+=1,d.dataset.name=i,d.querySelector(".delete-sign").addEventListener("click",(()=>{e(`${l} task${l>1?"s":""} will be set to Project: none`,!1),n.fn=()=>{Promise.resolve(async function(t){const e=t.dataset.name,o=await JSON.parse(localStorage.getItem("todolist")),n=await o;return Object.values(n.tasks).forEach((t=>{t.project===e&&(t.project="none")})),delete n.projects[e],localStorage.clear(),localStorage.setItem("todolist",JSON.stringify(n)),0}(d)).then((()=>{a(),s(),w.clearList(),w.createTasks()}))}})),t.querySelector("ol").appendChild(d)}))}async function c(t){const o=await S.getTodolist(),{projects:n}=await o;if(t in await n)return e("Create a project",!0,"the name has been used"),this;if(!1===t||!t.toString().trim())return e("Create a project",!0,"Please enter a name"),this;n[t]=0;const r=o;return r.projects=n,localStorage.clear(),localStorage.setItem("todolist",JSON.stringify(r)),a(),s(),0}return r.querySelector("img").src=k,r.addEventListener("click",(()=>{e("Create a project",!0),n.fn=c})),m.addEventListener("click",(()=>{u.classList.toggle("dp-none"),o.classList.toggle("dp-none"),d.classList.toggle("dp-none"),t.classList.toggle("dp-none"),r.classList.toggle("dp-none"),a(),s()})),{createProjectList:s}})(),q=C;Promise.resolve(S.getTodolist()).then((()=>{w.createTasks(),q.createProjectList()})),document.addEventListener("DOMContentLoaded",(()=>{h.colorBtns()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,